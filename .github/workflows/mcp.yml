name: MCP Package CI
on:
  push:
    paths:
      - 'packages/mcp/**'
      - '.github/workflows/mcp.yml'
  pull_request:
    paths:
      - 'packages/mcp/**'
      - '.github/workflows/mcp.yml'

env:
  NODE_VERSION: '20'

jobs:
  # Type checking and basic validation
  typecheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Type check MCP package
        run: npm run -w @prompted-forge/mcp typecheck
        
      - name: Build MCP package
        run: npm run -w @prompted-forge/mcp build

  # Matrix testing across implementation modes
  matrix-tests:
    runs-on: ubuntu-latest
    needs: typecheck
    strategy:
      fail-fast: false
      matrix:
        impl: [stub, full]
        include:
          - impl: stub
            description: "Stub implementation for fast testing"
          - impl: full  
            description: "Full implementation with real memory systems"
    
    name: "Test (${{ matrix.impl }})"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build packages
        run: |
          npm run build
          
      - name: Test MCP package (${{ matrix.description }})
        run: npm run -w @prompted-forge/mcp test
        env:
          PF_MEMORY_IMPL: ${{ matrix.impl }}
          
      - name: Test error mapping (${{ matrix.impl }})
        run: npm run -w @prompted-forge/mcp test -- tests/error-mapping.test.ts
        env:
          PF_MEMORY_IMPL: ${{ matrix.impl }}
          
      - name: Orchestrator integration test (${{ matrix.impl }})
        run: npm run -w @prompted-forge/mcp orchestrator-test
        env:
          PF_MEMORY_IMPL: ${{ matrix.impl }}
          
      - name: Smoke test MCP endpoints (${{ matrix.impl }})
        run: npm run -w @prompted-forge/mcp smoke:mcp
        env:
          PF_MEMORY_IMPL: ${{ matrix.impl }}

  # Performance and load testing (separate job for visibility)
  performance-tests:
    runs-on: ubuntu-latest
    needs: typecheck
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build packages
        run: npm run build
        
      - name: Performance benchmark (stub)
        run: npm run -w @prompted-forge/mcp perf-test
        env:
          PF_MEMORY_IMPL: stub
          
      - name: Validate performance budget
        run: npm run -w @prompted-forge/mcp check-perf-budget
        env:
          PF_MEMORY_IMPL: stub

  # Security and validation testing
  security-tests:
    runs-on: ubuntu-latest
    needs: typecheck
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build packages
        run: npm run build
        
      - name: Audit npm dependencies
        run: npm audit --audit-level high --workspace @prompted-forge/mcp
        
      - name: Validate contracts snapshot
        run: |
          cd packages/mcp
          # Check if snapshot is up to date
          npm run generate-contracts-snapshot
          if ! git diff --exit-code contracts.snapshot.json; then
            echo "‚ùå Contracts snapshot is out of date"
            echo "Run 'npm run generate-contracts-snapshot' and commit the changes"
            exit 1
          fi
          echo "‚úÖ Contracts snapshot is up to date"

  # Health check and version endpoint testing
  endpoint-tests:
    runs-on: ubuntu-latest
    needs: typecheck
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build packages
        run: npm run build
        
      - name: Test health endpoint
        run: |
          cd packages/mcp
          npm run test:health-endpoint
          
      - name: Test version endpoint
        run: |
          cd packages/mcp
          npm run test:version-endpoint
        env:
          GIT_SHA: ${{ github.sha }}
          BUILD_DATE: ${{ github.event.head_commit.timestamp }}

  # Final validation job
  validate-phase-3-2:
    runs-on: ubuntu-latest
    needs: [matrix-tests, performance-tests, security-tests, endpoint-tests]
    if: always()
    steps:
      - name: Check all tests passed
        run: |
          if [[ "${{ needs.matrix-tests.result }}" == "success" && 
                "${{ needs.performance-tests.result }}" == "success" && 
                "${{ needs.security-tests.result }}" == "success" && 
                "${{ needs.endpoint-tests.result }}" == "success" ]]; then
            echo "üéâ Phase 3.2 validation complete - all tests passed!"
            echo "‚úÖ Matrix testing (stub/full) passed"
            echo "‚úÖ Performance benchmarks passed" 
            echo "‚úÖ Security validation passed"
            echo "‚úÖ Health/version endpoints passed"
          else
            echo "‚ùå Phase 3.2 validation failed"
            exit 1
          fi
